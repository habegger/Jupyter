{"nbformat":4,"nbformat_minor":0,"metadata":{"celltoolbar":"Slideshow","kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"provenance":[{"file_id":"1_xO6pfgfxHvguHY62WTM1vIF4oJRTiwx","timestamp":1694896324491}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"bT5jwV_lib8h"},"source":["# **Kurze Python-Einführung**"]},{"cell_type":"markdown","metadata":{"id":"cydFCcTZib8n"},"source":["### Kommentare\n","\n","* Inline-Kommentare beginnen mit `#`.\n"]},{"cell_type":"code","metadata":{"id":"LvZTakSjib8n"},"source":["# dies ist ein Kommentar"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"__Xn5J5fib8o"},"source":["### Variablen und Typen"]},{"cell_type":"markdown","metadata":{"id":"BRFLdT5cib8o"},"source":["* Variablen haben keinen Typ\n","    * Variablen werden bei Initialisierung angelegt.\n","    * Alle Variablen sind nur Referenzen auf Objekte"]},{"cell_type":"code","metadata":{"id":"blnKFZpsib8o"},"source":["a = 3\n","s = \"Ich bin ein String\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Coc2_Nw4ib8p"},"source":["### Typüberprüfung"]},{"cell_type":"markdown","metadata":{"id":"ODqWvkowib8p"},"source":["Objekte von jedem Typ können Variable zugewiesen werden\n","* Typprüfung passiert zur Laufzeit und nicht vorher.\n"]},{"cell_type":"code","metadata":{"id":"jmu5DZe2ib8p","executionInfo":{"status":"error","timestamp":1695557969068,"user_tz":-120,"elapsed":7,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}},"outputId":"3be4ae9d-7628-4842-8e19-0c392b2bc10d","colab":{"base_uri":"https://localhost:8080/","height":199}},"source":["a = \"jetzt referenziert die Variable einen String\"\n","a / 2"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-2dae11c0bdcf>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"jetzt referenziert die Variable einen String\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'str' and 'int'"]}]},{"cell_type":"markdown","metadata":{"id":"HUG9sgVYib8p"},"source":["### Verzweigungen\n","\n","\n","* Bedignung ist nicht in Klammern\n","* Jeder Block wird durch ```:``` und Einrückung getrennt"]},{"cell_type":"code","metadata":{"id":"k5II6VZGib8q"},"source":["x = 34\n","\n","if x > 0:\n","    print(\"x ist positiv\")\n","elif x == 0:\n","    print(\"x ist Null\")\n","else:\n","    print(\"x ist negativ\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"un44aiTkib8q"},"source":["### Verknüpfungen"]},{"cell_type":"markdown","metadata":{"id":"5CWHczR3ib8q"},"source":["Logische Verknüpfung in Bedingungen erreicht man mit `and`, `or`, `not`:"]},{"cell_type":"code","metadata":{"id":"73X3y-pyib8q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697843919696,"user_tz":-120,"elapsed":10,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}},"outputId":"fa23dc85-842d-4b2a-8bcd-50f2e4dca0cf"},"source":["x = 7\n","y = 3\n","\n","print(x > 5 and y < 3)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]},{"cell_type":"markdown","metadata":{"id":"ACDPvEuAib8q"},"source":["### While-Schleife"]},{"cell_type":"code","metadata":{"id":"npaoVEnQib8r"},"source":["x = 5\n","while x > 0:\n","    print(x)\n","    x -= 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UrTqlRFKib8r"},"source":["### For-Schleife"]},{"cell_type":"markdown","metadata":{"id":"Nz28MVTyib8r"},"source":["* Iteriert über alle Elemente in einem bestimmten Bereich.\n","* Bereich wird mit ```range(lo, hi, step)``` definiert"]},{"cell_type":"code","metadata":{"id":"8JhWwgnJib8r"},"source":["for x in range(1, 9, 2):\n","    print(x)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ErCM_rhLib8r"},"source":["## Funktionen"]},{"cell_type":"markdown","metadata":{"id":"mKTfMA0dib8s"},"source":["Funktionen werden mit dem Schlüsselwort ```def``` definiert.\n","\n","* Funktionsblock wird durch ```:``` und Einrückung abgetrennt\n","* Rückgabe durch ```return```"]},{"cell_type":"code","metadata":{"id":"7JJCRjsQib8s"},"source":["def gcd(a, b):\n","    if b == 0:\n","        return a\n","    else:\n","        return gcd(b, a % b)\n","\n","gcd(48, 18)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PGaLLKt7ib8s"},"source":["## Listen"]},{"cell_type":"markdown","metadata":{"id":"nU1bCfrAib8s"},"source":["*Listen* enthalten Sequenzen von Objekten.\n","* Entsprechen Arrays in anderen Sprachen\n","     * Sind aber etwas flexibler"]},{"cell_type":"code","metadata":{"id":"CXaIF-vlib8s","executionInfo":{"status":"ok","timestamp":1698013848988,"user_tz":-120,"elapsed":628,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}}},"source":["numbers = [1, 2, 3, 4, 5]\n","names = [\"first\", \"middle\", \"last\"]"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C28PV7vkib8t"},"source":["### Zugriff auf Listenelemente\n","Listen können von vorne (nicht-negative Zahlen) oder hinten (negative Zahlen) indiziert werden.\n","\n","Das vorderste Element hat Index 0, das letze Index -1."]},{"cell_type":"code","metadata":{"id":"69n-LgZrib8t","colab":{"base_uri":"https://localhost:8080/","height":181},"executionInfo":{"status":"error","timestamp":1698013795553,"user_tz":-120,"elapsed":21,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}},"outputId":"0ef0f8e9-d780-4e09-d2c2-e35dd33067a8"},"source":["numbers[1]"],"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-d270c429a823>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnumbers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'numbers' is not defined"]}]},{"cell_type":"code","metadata":{"id":"WXBLAH2Iib8t","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1697844128902,"user_tz":-120,"elapsed":8,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}},"outputId":"5e6d125a-d13e-443a-e742-ca525662a301"},"source":["names[-1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'last'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"Nu5fdbo6ib8t","colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1697844281299,"user_tz":-120,"elapsed":228,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}},"outputId":"f347793e-ccc6-4648-e252-f8b7af10c66c"},"source":["print (names [1])\n","names[1] = \"in between\"\n","names [1]"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["in between\n"]},{"output_type":"execute_result","data":{"text/plain":["'in between'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"DZT59-i6ib8t"},"source":["### Länge einer Liste\n","\n","Die Länge einer Sequenz `seq` kann man mit `len(seq)` bestimmen."]},{"cell_type":"code","metadata":{"id":"v8OBYiqrib8t"},"source":["len([1,3,5,4])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zDWsN16Nib8v"},"source":["## Vertauschen zweier Variablen"]},{"cell_type":"markdown","metadata":{"id":"0S0oBcO8ib8v"},"source":["* Spezialfall vom Tuple unpacking"]},{"cell_type":"code","metadata":{"id":"GH6BRE-mib8v"},"source":["a = 3\n","b = 7\n","(a, b) = (b, a)\n","print((a, b))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GTFOeXdsib8v"},"source":["Funktioniert auch ohne Klammer:\n","```a, b = b, a```"]},{"cell_type":"markdown","metadata":{"id":"AlWYohmPib8w"},"source":["# Übungen\n","\n","* Schreiben Sie ein Programm, welches das kleine 1 x 1 berechnet (also die 1-er bis 9-er Reihe ausgibt). Nutzen Sie dazu zwei ineinander verschachtelte ```for```-loops.\n","    * Um etwas auszugeben nutzen Sie die ```print``` Funktion.\n","    * Wenn Sie keinen Zeilenumbruch wollen, schreiben Sie ```print(\"mein test\", end='')```\n","* Definieren Sie eine *Funktion* ```bmi``` welche für ein gegebene Grösse und Gewicht den BMI berechnet\n","\n","* Kommentieren Sie mit dem Zeichen #   die Funktion ```funky()``` und fügen Sie einen Textblock hinzu, indem Sie erklären, was die Funktion macht.\n"]},{"cell_type":"markdown","metadata":{"id":"jLEXtXZZib8w"},"source":["#### Lösungen (Bitte ergänzen)"]},{"cell_type":"code","metadata":{"id":"mWSeiUouib8x"},"source":["# Schreiben Sie das Programm für das 1 x 1\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DfvhvG-mib8y"},"source":["# Schreiben Sie das Programm für den BMI\n","\n","\n","bmi(170, 70)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LnUpn62hib8y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697843729727,"user_tz":-120,"elapsed":7,"user":{"displayName":"Patrick Habegger","userId":"15653991746056068785"}},"outputId":"559e2d58-201e-48f4-ac88-ae82cdbcac87"},"source":["def funky(list):\n","    min = list[0]\n","    max = list[0]\n","    for element in list:\n","        if element < min:\n","            min = element\n","        if element > max:\n","            max = element\n","    return (min, max)\n","\n","funky([3, 1, 7, 15, -3, -10])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-10, 15)"]},"metadata":{},"execution_count":2}]}]}